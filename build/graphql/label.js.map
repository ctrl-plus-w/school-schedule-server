{"version":3,"sources":["../../src/graphql/label.js"],"names":["typeDefs","gql","resolvers","Query","label","_parent","args","labelShortcut","find","id","labels","findAll","map","getObjectWithUsers","Mutation","createLabel","context","input","AuthenticationError","errors","NOT_ALLOWED","userShortcut","findWithRole","user","findByName","label_name","labelExist","UserInputError","LABEL_DUPLICATION","database","models","create","deleteLabel","DEFAULT","users","length","LABEL_CASCADE","update","deleted_at","Date","now","destroyLabel","destroy"],"mappings":"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","sourcesContent":["import { AuthenticationError, gql, UserInputError } from 'apollo-server-core';\n\nimport errors from '../config/errors';\nimport database from '../database';\n\nimport { label as labelShortcut, user as userShortcut } from '../utils/shortcut';\nimport { getObjectWithUsers } from '../utils/relationMapper';\nimport { checkIsAdmin } from '../utils/authorization';\n\nexport const typeDefs = gql`\n  extend type Query {\n    label(id: ID!): Label!\n    labels: [Label!]\n  }\n\n  extend type Mutation {\n    createLabel(input: LabelInput!): Label!\n\n    deleteLabel(id: ID!): Boolean\n\n    destroyLabel(id: ID!): Boolean\n  }\n\n  input LabelInput {\n    label_name: String!\n  }\n\n  type Label {\n    id: ID!\n    label_name: String!\n    users: [User!]\n    created_at: String!\n    updated_at: String\n    deleted_at: String\n  }\n`;\n\nexport const resolvers = {\n  Query: {\n    label: async (_parent, args) => {\n      const label = await labelShortcut.find(args.id);\n      return getObjectWithUsers(label);\n    },\n\n    labels: async () => {\n      const labels = await labelShortcut.findAll();\n      return labels.map(getObjectWithUsers);\n    },\n  },\n\n  Mutation: {\n    createLabel: async (_parent, { input: args }, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const user = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(user);\n\n      const labelExist = await labelShortcut.findByName(args.label_name);\n      if (labelExist) throw new UserInputError(errors.LABEL_DUPLICATION);\n\n      const label = await database.models.label.create({ label_name: args.label_name });\n      return getObjectWithUsers(label);\n    },\n\n    deleteLabel: async (_parent, args, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const user = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(user);\n\n      const label = await labelShortcut.find(args.id, database.models.user);\n      if (!label) throw new UserInputError(errors.DEFAULT);\n\n      if (label?.users.length > 0) throw new UserInputError(errors.LABEL_CASCADE);\n\n      await label.update({ deleted_at: Date.now() });\n      return true;\n    },\n\n    destroyLabel: async (_parent, args, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const user = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(user);\n\n      const label = await labelShortcut.find(args.id, database.models.user);\n      if (!label) throw new UserInputError(errors.DEFAULT);\n\n      if (label?.users.length > 0) throw new UserInputError(errors.LABEL_CASCADE);\n\n      await label.destroy();\n      return true;\n    },\n  },\n};\n"],"file":"label.js"}