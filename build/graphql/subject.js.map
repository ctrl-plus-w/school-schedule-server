{"version":3,"sources":["../../src/graphql/subject.js"],"names":["typeDefs","gql","resolvers","Query","subject","_parent","args","subjectShortcut","find","subject_id","subjects","findAll","map","getObjectWithUsers","Mutation","createSubject","context","input","id","ForbiddenError","errors","NOT_ALLOWED","userShortcut","findWithRole","loggedUser","findByName","subject_name","subjectExist","UserInputError","SUBJECT_DUPLICATION","create","color","deleteSubject","database","models","user","DEFAULT","users","length","SUBJECT_CASCADE","update","deleted_at","Date","now","destroySubject","findDeleted","destroy"],"mappings":"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","sourcesContent":["import { ForbiddenError, gql, UserInputError } from 'apollo-server-core';\n\nimport errors from '../config/errors';\nimport database from '../database';\n\nimport { getObjectWithUsers } from '../utils/relationMapper';\nimport { checkIsAdmin } from '../utils/authorization';\nimport { subject as subjectShortcut, user as userShortcut } from '../utils/shortcut';\n\nexport const typeDefs = gql`\n  extend type Query {\n    subject(id: ID!): Subject!\n    subjects: [Subject!]\n  }\n\n  extend type Mutation {\n    createSubject(input: SubjectInput): Subject!\n\n    deleteSubject(id: ID!): Boolean\n\n    destroySubject(id: ID!): Boolean\n  }\n\n  input SubjectInput {\n    subject_name: String!\n    color: String!\n  }\n\n  type Subject {\n    id: ID!\n    subject_name: String!\n    color: String!\n    users: [User!]\n    created_at: String!\n    updated_at: String\n    deleted_at: String\n  }\n`;\n\nexport const resolvers = {\n  Query: {\n    subject: async (_parent, args) => {\n      const subject = await subjectShortcut.find(args.subject_id);\n      return subject ? getObjectWithUsers(subject) : null;\n    },\n\n    subjects: async () => {\n      const subjects = await subjectShortcut.findAll();\n      return subjects.map(getObjectWithUsers);\n    },\n  },\n  Mutation: {\n    createSubject: async (_parent, { input: args }, context) => {\n      if (!context?.id) throw new ForbiddenError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const subjectExist = await subjectShortcut.findByName(args.subject_name);\n      if (subjectExist) throw new UserInputError(errors.SUBJECT_DUPLICATION);\n\n      const subject = await subjectShortcut.create({ subject_name: args.subject_name, color: args.color });\n      return getObjectWithUsers(subject);\n    },\n\n    deleteSubject: async (_parent, args, context) => {\n      if (!context?.id) throw new ForbiddenError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const subject = await subjectShortcut.find(args.id, database.models.user);\n      if (!subject) throw new UserInputError(errors.DEFAULT);\n\n      if (subject?.users.length > 0) throw new UserInputError(errors.SUBJECT_CASCADE);\n\n      await subject.update({ deleted_at: Date.now() });\n      return true;\n    },\n\n    destroySubject: async (_parent, args, context) => {\n      if (!context?.id) throw new ForbiddenError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const subject = await subjectShortcut.findDeleted(args.id, database.models.user);\n      if (!subject) throw new UserInputError(errors.DEFAULT);\n\n      if (subject?.users.length > 0) throw new UserInputError(errors.SUBJECT_CASCADE);\n\n      await subject.destroy();\n      return true;\n    },\n  },\n};\n"],"file":"subject.js"}