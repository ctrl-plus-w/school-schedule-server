{"version":3,"sources":["../../src/graphql/role.js"],"names":["typeDefs","gql","resolvers","Query","role","_parent","args","roleShortcut","find","id","roles","findAll","map","getObjectWithUsers","Mutation","createRole","context","input","AuthenticationError","errors","NOT_ALLOWED","userShortcut","findWithRole","loggedUser","findByName","role_name","roleExist","UserInputError","ROLE_DUPLICATION","create","deleteRole","database","models","user","DEFAULT","users","length","ROLE_CASCADE","update","deleted_at","destroyRole","findDeleted","destroy"],"mappings":"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","sourcesContent":["import { AuthenticationError, gql, UserInputError } from 'apollo-server-core';\n\nimport errors from '../config/errors';\nimport database from '../database';\n\nimport { getObjectWithUsers } from '../utils/relationMapper';\n\nimport { checkIsAdmin } from '../utils/authorization';\nimport { role as roleShortcut, user as userShortcut } from '../utils/shortcut';\n\nexport const typeDefs = gql`\n  extend type Query {\n    role(id: ID!): Role!\n    roles: [Role!]\n  }\n\n  extend type Mutation {\n    createRole(input: RoleInput): Role!\n\n    deleteRole(id: ID!): Boolean\n\n    destroyRole(id: ID!): Boolean\n  }\n\n  input RoleInput {\n    role_name: String!\n  }\n\n  type Role {\n    id: ID!\n    role_name: String!\n    users: [User!]\n    created_at: String!\n    updated_at: String\n    deleted_at: String\n  }\n`;\n\nexport const resolvers = {\n  Query: {\n    role: async (_parent, args) => {\n      const role = await roleShortcut.find(args.id);\n      return getObjectWithUsers(role);\n    },\n\n    roles: async () => {\n      const roles = await roleShortcut.findAll();\n      return roles.map(getObjectWithUsers);\n    },\n  },\n  Mutation: {\n    createRole: async (_parent, { input: args }, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const roleExist = await roleShortcut.findByName(args.role_name);\n      if (roleExist) throw new UserInputError(errors.ROLE_DUPLICATION);\n\n      const role = await roleShortcut.create({ role_name: args.role_name });\n      return getObjectWithUsers(role);\n    },\n\n    deleteRole: async (_parent, args, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const role = await roleShortcut.find(args.id, database.models.user);\n      if (!role) throw new UserInputError(errors.DEFAULT);\n\n      if (role?.users.length > 0) throw new UserInputError(errors.ROLE_CASCADE);\n\n      await role.update({ deleted_at: null });\n      return true;\n    },\n\n    destroyRole: async (_parent, args, context) => {\n      if (!context?.id) throw new AuthenticationError(errors.NOT_ALLOWED);\n\n      const loggedUser = await userShortcut.findWithRole(context.id);\n      await checkIsAdmin(loggedUser);\n\n      const role = await roleShortcut.findDeleted(args.id, database.models.user);\n      if (!role) throw new UserInputError(errors.DEFAULT);\n\n      if (role?.users.length > 0) throw new UserInputError(errors.ROLE_CASCADE);\n\n      await role.destroy();\n      return true;\n    },\n  },\n};\n"],"file":"role.js"}