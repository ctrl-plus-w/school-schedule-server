{"version":3,"sources":["../../src/graphql/auth.js"],"names":["typeDefs","gql","resolvers","Mutation","login","_parent","args","user","userShortcut","findByUsername","username","database","models","role","AuthenticationError","errors","BAD_CREDENTIAL","isPasswordValid","bcrypt","compare","password","payload","id","role_name","full_name","options","expiresIn","config","JWT_TOKEN_EXPIRATION","token","jwt","sign","JWT_KEY","verifyToken","_args","context","auth","Error","NOT_ALLOWED"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;AAEO,MAAMA,QAAQ,OAAGC,qBAAH,uSAAd;;AAeA,MAAMC,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,OAAOC,OAAP,EAAgBC,IAAhB,KAAyB;AAC9B,YAAMC,IAAI,GAAG,MAAMC,eAAaC,cAAb,CAA4BH,IAAI,CAACI,QAAjC,EAA2C,CAACC,kBAASC,MAAT,CAAgBC,IAAjB,CAA3C,CAAnB;AACA,UAAI,CAACN,IAAL,EAAW,MAAM,IAAIO,qCAAJ,CAAwBC,gBAAOC,cAA/B,CAAN;AAEX,YAAMC,eAAe,GAAG,MAAMC,gBAAOC,OAAP,CAAeb,IAAI,CAACc,QAApB,EAA8Bb,IAAI,CAACa,QAAnC,CAA9B;AACA,UAAI,CAACH,eAAL,EAAsB,MAAM,IAAIH,qCAAJ,CAAwBC,gBAAOC,cAA/B,CAAN;AAEtB,YAAMK,OAAO,GAAG;AAAEC,QAAAA,EAAE,EAAEf,IAAI,CAACe,EAAX;AAAeT,QAAAA,IAAI,EAAEN,IAAI,CAACM,IAAL,CAAUU,SAA/B;AAA0CC,QAAAA,SAAS,EAAEjB,IAAI,CAACiB;AAA1D,OAAhB;AACA,YAAMC,OAAO,GAAG;AAAEC,QAAAA,SAAS,YAAKC,gBAAOC,oBAAZ;AAAX,OAAhB;;AAEA,YAAMC,KAAK,GAAGC,sBAAIC,IAAJ,CAASV,OAAT,EAAkBM,gBAAOK,OAAzB,EAAkCP,OAAlC,CAAd;;AAEA,6CAAYJ,OAAZ;AAAqBQ,QAAAA;AAArB;AACD,KAdO;AAgBRI,IAAAA,WAAW,EAAE,OAAO5B,OAAP,EAAgB6B,KAAhB,EAAuBC,OAAvB,KAAmC;AAC9C,UAAI,CAACA,OAAO,CAACC,IAAb,EAAmB,MAAM,IAAIC,KAAJ,CAAUtB,gBAAOuB,WAAjB,CAAN;AAEnB,aAAO;AACLhB,QAAAA,EAAE,EAAEa,OAAO,CAACb,EADP;AAELT,QAAAA,IAAI,EAAEsB,OAAO,CAACtB,IAFT;AAGLW,QAAAA,SAAS,EAAEW,OAAO,CAACX,SAHd;AAILK,QAAAA,KAAK,EAAEM,OAAO,CAACN;AAJV,OAAP;AAMD;AAzBO;AADa,CAAlB","sourcesContent":["import { gql, AuthenticationError } from 'apollo-server-core';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nimport { user as userShortcut } from '../utils/shortcut';\n\nimport config from '../config';\nimport errors from '../config/errors';\nimport database from '../database';\n\nexport const typeDefs = gql`\n  extend type Mutation {\n    login(username: String!, password: String!): AuthData!\n\n    verifyToken: AuthData!\n  }\n\n  type AuthData {\n    id: ID!\n    role: String!\n    full_name: String!\n    token: String!\n  }\n`;\n\nexport const resolvers = {\n  Mutation: {\n    login: async (_parent, args) => {\n      const user = await userShortcut.findByUsername(args.username, [database.models.role]);\n      if (!user) throw new AuthenticationError(errors.BAD_CREDENTIAL);\n\n      const isPasswordValid = await bcrypt.compare(args.password, user.password);\n      if (!isPasswordValid) throw new AuthenticationError(errors.BAD_CREDENTIAL);\n\n      const payload = { id: user.id, role: user.role.role_name, full_name: user.full_name };\n      const options = { expiresIn: `${config.JWT_TOKEN_EXPIRATION}h` };\n\n      const token = jwt.sign(payload, config.JWT_KEY, options);\n\n      return { ...payload, token };\n    },\n\n    verifyToken: async (_parent, _args, context) => {\n      if (!context.auth) throw new Error(errors.NOT_ALLOWED);\n\n      return {\n        id: context.id,\n        role: context.role,\n        full_name: context.full_name,\n        token: context.token,\n      };\n    },\n  },\n};\n"],"file":"auth.js"}