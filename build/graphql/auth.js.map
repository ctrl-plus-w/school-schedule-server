{"version":3,"sources":["../../src/graphql/auth.js"],"names":["typeDefs","gql","resolvers","Mutation","login","_parent","args","userShortcut","findByUsername","username","database","models","role","user","AuthenticationError","errors","BAD_CREDENTIAL","bcrypt","compare","password","isPasswordValid","payload","id","role_name","full_name","options","expiresIn","config","JWT_TOKEN_EXPIRATION","token","jwt","sign","JWT_KEY","verifyToken","_args","context","auth","Error","NOT_ALLOWED"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEO,IAAMA,QAAQ,OAAGC,qBAAH,uSAAd;;AAeA,IAAMC,SAAS,GAAG;AACvBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK;AAAA,2EAAE,iBAAOC,OAAP,EAAgBC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACcC,eAAaC,cAAb,CAA4BF,IAAI,CAACG,QAAjC,EAA2C,CAACC,qBAASC,MAAT,CAAgBC,IAAjB,CAA3C,CADd;;AAAA;AACCC,gBAAAA,IADD;;AAAA,oBAEAA,IAFA;AAAA;AAAA;AAAA;;AAAA,sBAEY,IAAIC,qCAAJ,CAAwBC,mBAAOC,cAA/B,CAFZ;;AAAA;AAAA;AAAA,uBAIyBC,mBAAOC,OAAP,CAAeZ,IAAI,CAACa,QAApB,EAA8BN,IAAI,CAACM,QAAnC,CAJzB;;AAAA;AAICC,gBAAAA,eAJD;;AAAA,oBAKAA,eALA;AAAA;AAAA;AAAA;;AAAA,sBAKuB,IAAIN,qCAAJ,CAAwBC,mBAAOC,cAA/B,CALvB;;AAAA;AAOCK,gBAAAA,OAPD,GAOW;AAAEC,kBAAAA,EAAE,EAAET,IAAI,CAACS,EAAX;AAAeV,kBAAAA,IAAI,EAAEC,IAAI,CAACD,IAAL,CAAUW,SAA/B;AAA0CC,kBAAAA,SAAS,EAAEX,IAAI,CAACW;AAA1D,iBAPX;AAQCC,gBAAAA,OARD,GAQW;AAAEC,kBAAAA,SAAS,YAAKC,mBAAOC,oBAAZ;AAAX,iBARX;AAUCC,gBAAAA,KAVD,GAUSC,yBAAIC,IAAJ,CAASV,OAAT,EAAkBM,mBAAOK,OAAzB,EAAkCP,OAAlC,CAVT;AAAA,iFAYOJ,OAZP;AAYgBQ,kBAAAA,KAAK,EAALA;AAZhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADG;AAgBRI,IAAAA,WAAW;AAAA,iFAAE,kBAAO5B,OAAP,EAAgB6B,KAAhB,EAAuBC,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,oBACNA,OAAO,CAACC,IADF;AAAA;AAAA;AAAA;;AAAA,sBACc,IAAIC,KAAJ,CAAUtB,mBAAOuB,WAAjB,CADd;;AAAA;AAAA,kDAGJ;AACLhB,kBAAAA,EAAE,EAAEa,OAAO,CAACb,EADP;AAELV,kBAAAA,IAAI,EAAEuB,OAAO,CAACvB,IAFT;AAGLY,kBAAAA,SAAS,EAAEW,OAAO,CAACX,SAHd;AAILK,kBAAAA,KAAK,EAAEM,OAAO,CAACN;AAJV,iBAHI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBH;AADa,CAAlB","sourcesContent":["import { gql, AuthenticationError } from 'apollo-server-core';\nimport bcrypt from 'bcrypt';\nimport jwt from 'jsonwebtoken';\n\nimport { user as userShortcut } from '../utils/shortcut';\n\nimport config from '../config';\nimport errors from '../config/errors';\nimport database from '../database';\n\nexport const typeDefs = gql`\n  extend type Mutation {\n    login(username: String!, password: String!): AuthData!\n\n    verifyToken: AuthData!\n  }\n\n  type AuthData {\n    id: ID!\n    role: String!\n    full_name: String!\n    token: String!\n  }\n`;\n\nexport const resolvers = {\n  Mutation: {\n    login: async (_parent, args) => {\n      const user = await userShortcut.findByUsername(args.username, [database.models.role]);\n      if (!user) throw new AuthenticationError(errors.BAD_CREDENTIAL);\n\n      const isPasswordValid = await bcrypt.compare(args.password, user.password);\n      if (!isPasswordValid) throw new AuthenticationError(errors.BAD_CREDENTIAL);\n\n      const payload = { id: user.id, role: user.role.role_name, full_name: user.full_name };\n      const options = { expiresIn: `${config.JWT_TOKEN_EXPIRATION}h` };\n\n      const token = jwt.sign(payload, config.JWT_KEY, options);\n\n      return { ...payload, token };\n    },\n\n    verifyToken: async (_parent, _args, context) => {\n      if (!context.auth) throw new Error(errors.NOT_ALLOWED);\n\n      return {\n        id: context.id,\n        role: context.role,\n        full_name: context.full_name,\n        token: context.token,\n      };\n    },\n  },\n};\n"],"file":"auth.js"}