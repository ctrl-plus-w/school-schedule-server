{"version":3,"sources":["../src/index.js"],"names":["app","use","express","json","origin","server","ApolloServer","typeDefs","resolvers","context","isAuth","applyMiddleware","PORT","process","env","listen","console","log"],"mappings":";;AAAA;;AACA;;AACA;;AAEA;;AAEA;;;;;;;;AAEA,wDAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOA,UAAAA,GADP,GACa,0BADb,EAGC;AACA;;AACAA,UAAAA,GAAG,CAACC,GAAJ,CAAQC,oBAAQC,IAAR,EAAR;AACAH,UAAAA,GAAG,CAACC,GAAJ,CAAQ,sBAAK;AAAEG,YAAAA,MAAM,EAAE;AAAV,WAAL,CAAR,EAND,CAQC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACMC,UAAAA,MApBP,GAoBgB,IAAIC,iCAAJ,CAAiB;AAAEC,YAAAA,QAAQ,EAARA,iBAAF;AAAYC,YAAAA,SAAS,EAATA,kBAAZ;AAAuBC,YAAAA,OAAO,EAAEC;AAAhC,WAAjB,CApBhB;AAqBCL,UAAAA,MAAM,CAACM,eAAP,CAAuB;AAAEX,YAAAA,GAAG,EAAHA;AAAF,WAAvB,EArBD,CAuBC;;AACMY,UAAAA,IAxBP,GAwBcC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAxBlC;AAyBCZ,UAAAA,GAAG,CAACe,MAAJ,CAAWH,IAAX,EAAiB;AAAA,mBAAMI,OAAO,CAACC,GAAR,+BAAmCL,IAAnC,iCAA8DA,IAA9D,OAAN;AAAA,WAAjB;;AAzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","sourcesContent":["import { ApolloServer } from 'apollo-server-express';\nimport express from 'express';\nimport cors from 'cors';\n\nimport isAuth from './middlewares/is-auth';\n\nimport { resolvers, typeDefs } from './graphql';\n\n(async () => {\n  const app = express();\n\n  // Middlewares\n  // app.use(morgan('dev'));\n  app.use(express.json());\n  app.use(cors({ origin: '*' }));\n\n  // TODO : [-] Handle user delete and destroy. (don't forget to fetch only records where deleted_at is null)\n\n  // TODO : [x] User is fetched at the beggining of each Mutation.\n  // TODO : [x] When creating something, verify if the unique fields aren't on the deleted_at fields.\n\n  // TODO : [x] Verify if { include: [...models] } is compulsary on queries.\n  // TODO : [x] Transform query with { where: { id: __ }} to findByPK.\n  // TODO : [x] Set permissions levels.\n  // TODO : [x] When deleting a label, verify if there isn't an event in the user's labels.\n  // TODO : [x] When deleting a subject, verify if there isn't an event in the user's subjects.\n\n  // Graphql\n  const server = new ApolloServer({ typeDefs, resolvers, context: isAuth });\n  server.applyMiddleware({ app });\n\n  // Start server.\n  const PORT = process.env.PORT || 5000;\n  app.listen(PORT, () => console.log(`App started on port ${PORT} . http://localhost:${PORT} `));\n})();\n"],"file":"index.js"}