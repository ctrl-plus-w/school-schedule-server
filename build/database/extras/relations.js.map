{"version":3,"sources":["../../../src/database/extras/relations.js"],"names":["sequelize","event","label","role","subject","user","user_labels","user_subjects","models","belongsToMany","through","foreignKey","otherKey","other_key","hasOne","belongsTo","hasMany"],"mappings":";;;;;;;;;eAAe,MAAOA,SAAP,IAAqB;AAClC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,IAA/B;AAAqCC,IAAAA,WAArC;AAAkDC,IAAAA;AAAlD,MAAoEP,SAAS,CAACQ,MAApF,CADkC,CAGlC;;AACAN,EAAAA,KAAK,CAACO,aAAN,CAAoBJ,IAApB,EAA0B;AAAEK,IAAAA,OAAO,EAAEJ,WAAX;AAAwBK,IAAAA,UAAU,EAAE,UAApC;AAAgDC,IAAAA,QAAQ,EAAE;AAA1D,GAA1B;AACAP,EAAAA,IAAI,CAACI,aAAL,CAAmBP,KAAnB,EAA0B;AAAEQ,IAAAA,OAAO,EAAEJ,WAAX;AAAwBK,IAAAA,UAAU,EAAE,SAApC;AAA+CC,IAAAA,QAAQ,EAAE;AAAzD,GAA1B,EALkC,CAOlC;;AACAR,EAAAA,OAAO,CAACK,aAAR,CAAsBJ,IAAtB,EAA4B;AAAEK,IAAAA,OAAO,EAAEH,aAAX;AAA0BI,IAAAA,UAAU,EAAE,YAAtC;AAAoDE,IAAAA,SAAS,EAAE;AAA/D,GAA5B;AACAR,EAAAA,IAAI,CAACI,aAAL,CAAmBL,OAAnB,EAA4B;AAAEM,IAAAA,OAAO,EAAEH,aAAX;AAA0BI,IAAAA,UAAU,EAAE,SAAtC;AAAiDE,IAAAA,SAAS,EAAE;AAA5D,GAA5B,EATkC,CAWlC;;AACAT,EAAAA,OAAO,CAACU,MAAR,CAAeb,KAAf;AACAA,EAAAA,KAAK,CAACc,SAAN,CAAgBX,OAAhB,EAbkC,CAelC;;AACAF,EAAAA,KAAK,CAACc,OAAN,CAAcf,KAAd;AACAA,EAAAA,KAAK,CAACc,SAAN,CAAgBb,KAAhB,EAjBkC,CAmBlC;;AACAG,EAAAA,IAAI,CAACS,MAAL,CAAYb,KAAZ,EAAmB;AAAEU,IAAAA,UAAU,EAAE;AAAd,GAAnB;AACAV,EAAAA,KAAK,CAACc,SAAN,CAAgBV,IAAhB,EAAsB;AAAEM,IAAAA,UAAU,EAAE;AAAd,GAAtB,EArBkC,CAuBlC;;AACAR,EAAAA,IAAI,CAACa,OAAL,CAAaX,IAAb;AACAA,EAAAA,IAAI,CAACU,SAAL,CAAeZ,IAAf;AACD,C","sourcesContent":["export default async (sequelize) => {\n  const { event, label, role, subject, user, user_labels, user_subjects } = sequelize.models;\n\n  // User / Label relation.\n  label.belongsToMany(user, { through: user_labels, foreignKey: 'label_id', otherKey: 'user_id' });\n  user.belongsToMany(label, { through: user_labels, foreignKey: 'user_id', otherKey: 'label_id' });\n\n  // Subject / User (owning) relation.\n  subject.belongsToMany(user, { through: user_subjects, foreignKey: 'subject_id', other_key: 'user_id' });\n  user.belongsToMany(subject, { through: user_subjects, foreignKey: 'user_id', other_key: 'subject_id' });\n\n  // Subject / Event relation.\n  subject.hasOne(event);\n  event.belongsTo(subject);\n\n  // Label / Event relation.\n  label.hasMany(event);\n  event.belongsTo(label);\n\n  // Subject / Owner relation.\n  user.hasOne(event, { foreignKey: 'owner_id' });\n  event.belongsTo(user, { foreignKey: 'owner_id' });\n\n  // User / Role relation.\n  role.hasMany(user);\n  user.belongsTo(role);\n};\n"],"file":"relations.js"}